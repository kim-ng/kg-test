    private PDRectangle pageSize = PDRectangle.A4;

    private Integer marginX = 50;
    private Integer marginY = 50;

    @Test
    public void test1() throws IOException {
        PDDocument document = new PDDocument();
        PDType0Font font = PDType0Font.load(document, new FileInputStream(new File("d:\\tmp\\simsun.ttf")));
        drawFirstPage(document, font);
        drawSecondPage(document, font);
        document.save(new FileOutputStream(new File("d:\\tmp\\test2.pdf")));
        document.close();
    }

    private void drawSecondPage(PDDocument document, PDType0Font font) throws IOException {
        PDPage mainTablePage = new PDPage(pageSize);
        document.addPage(mainTablePage);
        PDPageContentStream contentStream = new PDPageContentStream(document, mainTablePage);

        PdfBoxUtils.beginTextSteam(contentStream, 20f, marginX.floatValue(), pageSize.getHeight() - 2*marginY);
        // 书写信息
        PdfBoxUtils.drawParagraph(contentStream, "买卖人商品提交明细", font, 18);
        PdfBoxUtils.endTextSteam(contentStream);

        // 开始绘制table
        List<Column> header = initTableHeader();

        List<List<String>> records = new ArrayList<>();
        for (int i = 0; i < 90; i++) {
            records.add(Arrays.asList( "李太白" + i, "广州市分机构","20202020", "10000000"));
        }

        float tableHight = pageSize.getHeight() - (2 * marginY);

        Table table = new TableBuilder()
                .setCellMargin(4)
                .setRowHeight(20)
                .setColumns(header)
                .setContent(records)
                .setHeight(tableHight)
                .setMargin(marginX)
                .setPageSize(pageSize)
                .setTextFont(font)
                .setFontSize(13)
                .build();

        // 每页最多显示的条数
        Integer rowsPerPage = table.getRowsPerPage();
        // 首页
        Integer dataNum = 30;
        FirstTablePage firstTablePage = new FirstTablePage();
        firstTablePage.setDataNum(dataNum);
        firstTablePage.setMargin(100f);
        firstTablePage.setContentStream(contentStream);

        int firstBatch = rowsPerPage + dataNum;
        List<List<String>> firstRecords = new ArrayList<>(firstBatch);
        Iterator<List<String>> iterator = records.iterator();
        int index = 0;
        while (iterator.hasNext()) {
            List<String> record = iterator.next();
            firstRecords.add(record);
            iterator.remove();
            index ++;
            if (index >= firstBatch) {
                break;
            }
        }
        table.setRecords(firstRecords);
        new PdfTableGenerator().drawTableCustom(document, firstTablePage, table);
        // 剩下的
        int batchNum = rowsPerPage * 2;
        List<List<String>> batchRecords = new ArrayList<>(batchNum);
        iterator = records.iterator();
        index = 0;
        while (iterator.hasNext()) {
            List<String> record = iterator.next();
            batchRecords.add(record);
            iterator.remove();
            index ++;
            if (index % batchNum == 0) {
                table.setRecords(batchRecords);
                new PdfTableGenerator().drawTableCustom(document, null, table);
                batchRecords = new ArrayList<>(batchNum);
            }
        }
        table.setRecords(batchRecords);
        new PdfTableGenerator().drawTableCustom(document, null, table);
    }

    private List<Column> initTableHeader() {
        List<Column> header = new ArrayList<Column>();
        header.add(new Column("买卖人人名称", 150));
        header.add(new Column("店铺名称", 150));
        header.add(new Column("商品号", 100));
        header.add(new Column("商品价格(元)", 100));
        return header;
    }